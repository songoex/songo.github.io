<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://songoex.github.io</id>
    <title>Gridea</title>
    <updated>2020-09-24T03:07:14.427Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://songoex.github.io"/>
    <link rel="self" href="https://songoex.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://songoex.github.io/images/avatar.png</logo>
    <icon>https://songoex.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[appium笔记]]></title>
        <id>https://songoex.github.io/post/hello-gridea/</id>
        <link href="https://songoex.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="appium-desktop">Appium Desktop</h2>
<p><a href="https://github.com/appium/appium-desktop/releases">https://github.com/appium/appium-desktop/releases</a><br>
下载可以参考这里：<a href="https://testerhome.com/topics/680">https://testerhome.com/topics/680</a></p>
<h2 id="appium-server">Appium Server</h2>
<p>安装方法<br>
安装nodejs，推荐LTS版本<br>
安装appium<br>
npm install -g appium<br>
专属工具 bashgems : proxy npm install -g appium<br>
淘宝cnpm<br>
npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>
cnpm install -g appium<br>
<a href="https://testerhome.com/topics/6040">https://testerhome.com/topics/6040</a></p>
<h2 id="获取app信息">获取app信息</h2>
<pre><code>app信息
获取当前界面元素：adb shell dumpsys activity top
获取任务列表：adb shell dumpsys  activity activities
app入口
adb logcat |grep -i displayed
aapt dump badging mobike.apk  | grep launchable-activity
apkanalyzer 最新版本的sdk中才有
启动应用
adb shell am start -W -n com.xueqiu.android/.view.WelcomeActivityAlias -S
</code></pre>
<h2 id="录制代码">录制代码</h2>
<pre><code># This sample code uses the Appium python client
# pip install Appium-Python-Client
# Then you can paste this into a file and simply run with Python

from appium import webdriver

caps = {}
caps[&quot;platformName&quot;] = &quot;android&quot;
caps[&quot;deviceName&quot;] = &quot;hogwarts&quot;
caps[&quot;appPackage&quot;] = &quot;com.xueqiu.android&quot;
caps[&quot;appActivity&quot;] = &quot;.view.WelcomeActivityAlias&quot;

driver = webdriver.Remote(&quot;http://localhost:4723/wd/hub&quot;, caps)

el1 = driver.find_element_by_id(&quot;com.xueqiu.android:id/agree&quot;)
el1.click()
el2 = driver.find_element_by_id(&quot;com.xueqiu.android:id/tv_search&quot;)
el2.click()
el3 = driver.find_element_by_id(&quot;com.xueqiu.android:id/search_input_text&quot;)
el3.send_keys(&quot;alibaba&quot;)
el4 = driver.find_element_by_xpath(&quot;/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.support.v4.view.ViewPager/android.widget.RelativeLayout/android.widget.ListView/android.widget.LinearLayout[1]/android.widget.LinearLayout/android.widget.LinearLayout/android.widget.RelativeLayout[1]/android.widget.LinearLayout[1]/android.widget.TextView&quot;)
el4.click()

driver.quit()
</code></pre>
<pre><code>import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import junit.framework.TestCase;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.net.MalformedURLException;
import java.net.URL;
import org.openqa.selenium.remote.DesiredCapabilities;

public class SampleTest {

  private AndroidDriver driver;

  @Before
  public void setUp() throws MalformedURLException {
    DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
    desiredCapabilities.setCapability(&quot;platformName&quot;, &quot;android&quot;);
    desiredCapabilities.setCapability(&quot;deviceName&quot;, &quot;hogwarts&quot;);
    desiredCapabilities.setCapability(&quot;appPackage&quot;, &quot;com.xueqiu.android&quot;);
    desiredCapabilities.setCapability(&quot;appActivity&quot;, &quot;.view.WelcomeActivityAlias&quot;);

    URL remoteUrl = new URL(&quot;http://localhost:4723/wd/hub&quot;);

    driver = new AndroidDriver(remoteUrl, desiredCapabilities);
  }

  @Test
  public void sampleTest() {
    MobileElement el1 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/agree&quot;);
    el1.click();
    MobileElement el2 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/tv_search&quot;);
    el2.click();
    MobileElement el3 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/search_input_text&quot;);
    el3.sendKeys(&quot;alibaba&quot;);
    MobileElement el4 = (MobileElement) driver.findElementByXPath(&quot;/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.support.v4.view.ViewPager/android.widget.RelativeLayout/android.widget.ListView/android.widget.LinearLayout[1]/android.widget.LinearLayout/android.widget.LinearLayout/android.widget.RelativeLayout[1]/android.widget.LinearLayout[1]/android.widget.TextView&quot;);
    el4.click();
  }

  @After
  public void tearDown() {
    driver.quit();
  }
}
</code></pre>
<h2 id="用例改造">用例改造</h2>
<pre><code># This sample code uses the Appium python client
# pip install Appium-Python-Client
# Then you can paste this into a file and simply run with Python

from appium import webdriver

caps = {}
caps[&quot;platformName&quot;] = &quot;android&quot;
caps[&quot;deviceName&quot;] = &quot;hogwarts&quot;
caps[&quot;appPackage&quot;] = &quot;com.xueqiu.android&quot;
caps[&quot;appActivity&quot;] = &quot;.view.WelcomeActivityAlias&quot;

driver = webdriver.Remote(&quot;http://localhost:4723/wd/hub&quot;, caps)
driver.implicitly_wait(5)

el1 = driver.find_element_by_id(&quot;com.xueqiu.android:id/agree&quot;)
el1.click()
el2 = driver.find_element_by_id(&quot;com.xueqiu.android:id/tv_search&quot;)
el2.click()
el3 = driver.find_element_by_id(&quot;com.xueqiu.android:id/search_input_text&quot;)
el3.send_keys(&quot;alibaba&quot;)
driver.find_element_by_id(&quot;stockName&quot;).click()
#el4 = driver.find_element_by_xpath(&quot;/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.support.v4.view.ViewPager/android.widget.RelativeLayout/android.widget.ListView/android.widget.LinearLayout[1]/android.widget.LinearLayout/android.widget.LinearLayout/android.widget.RelativeLayout[1]/android.widget.LinearLayout[1]/android.widget.TextView&quot;)
#el4.click()

driver.quit()
</code></pre>
<pre><code>import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import junit.framework.TestCase;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.remote.DesiredCapabilities;

public class XueqiuTest {

    private AndroidDriver driver;

    @Before
    public void setUp() throws MalformedURLException {
        DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
        desiredCapabilities.setCapability(&quot;platformName&quot;, &quot;android&quot;);
        desiredCapabilities.setCapability(&quot;deviceName&quot;, &quot;hogwarts&quot;);
        desiredCapabilities.setCapability(&quot;appPackage&quot;, &quot;com.xueqiu.android&quot;);
        desiredCapabilities.setCapability(&quot;appActivity&quot;, &quot;.view.WelcomeActivityAlias&quot;);

        URL remoteUrl = new URL(&quot;http://localhost:4723/wd/hub&quot;);

        driver = new AndroidDriver(remoteUrl, desiredCapabilities);
        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
    }

    @Test
    public void sampleTest() {
        MobileElement el1 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/agree&quot;);
        el1.click();
        MobileElement el2 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/tv_search&quot;);
        el2.click();
        MobileElement el3 = (MobileElement) driver.findElementById(&quot;com.xueqiu.android:id/search_input_text&quot;);
        el3.sendKeys(&quot;alibaba&quot;);

        driver.findElementById(&quot;stockName&quot;).click();
        //MobileElement el4 = (MobileElement) driver.findElementByXPath(&quot;/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.support.v4.view.ViewPager/android.widget.RelativeLayout/android.widget.ListView/android.widget.LinearLayout[1]/android.widget.LinearLayout/android.widget.LinearLayout/android.widget.RelativeLayout[1]/android.widget.LinearLayout[1]/android.widget.TextView&quot;);
        //el4.click();
    }

    @After
    public void tearDown() {
        driver.quit();
    }
}
</code></pre>
<h2 id="android-studio配置">Android Studio配置</h2>
<p>AS地址：<a href="https://developer.android.com/studio/">https://developer.android.com/studio/</a></p>
<h2 id="模拟器">模拟器</h2>
<h2 id="测试用例编写">测试用例编写</h2>
<p>capability所有设置: http://appium.io/docs/en/writing-running-appium/caps/</p>
<h2 id="元素定位">元素定位</h2>
<ul>
<li>id定位</li>
<li>xpath定位</li>
<li>accessibility id定位</li>
<li>find elements + index</li>
</ul>
<p>xpath定位<br>
绝对定位<br>
<code>/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.widget.HorizontalScrollView/android.widget.LinearLayout/android.widget.RelativeLayout[2]/android.widget.RelativeLayout/android.widget.TextView</code></p>
<p>相对定位</p>
<pre><code>(//android.widget.TextView[@text='股票'])[1]
//android.widget.TextView[@text='股票' and @resource-id='com.xueqiu.android:id/text']
//*[@text='股票' and @resource-id='com.xueqiu.android:id/text']
//android.widget.TextView[@instance=2]
//*[contains(@resource-id, 'text') and @text='股票']
</code></pre>
<h2 id="常见动作">常见动作</h2>
<pre><code>def test_swipe(self):
    self.driver.find_element_by_id(&quot;agree&quot;).click()
    TouchAction(self.driver).press(x=600, y=2000).move_to(x=200, y=2000).release().perform()
    TouchAction(self.driver).press(x=600, y=2000).move_to(x=600, y=200).release().perform()
@Test
public void testSwipe(){
    driver.findElementById(&quot;com.xueqiu.android:id/agree&quot;).click();
    new TouchAction(driver)
            .press(PointOption.point(600, 2000))
            .moveTo(PointOption.point(200, 2000))
            .release()
            .perform();
    new TouchAction(driver)
            .press(PointOption.point(600, 2000))
            .moveTo(PointOption.point(600, 200))
            .release()
            .perform();

}
</code></pre>
<h2 id="实例">实例</h2>
<pre><code>from appium import webdriver
import time
import unittest

#配置程序入口信息
class ContactsAndroidTests(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Remote(#初始化driver
            command_executor='http://127.0.0.1:4723/wd/hub',
            desired_capabilities={
                'platformName': 'android',
                'platformVersion': '4.4.4',
                'deviceName': 'OPPO R7s',
                'appPackage': 'com.yuantiku.tutor',
                'appActivity': 'com.yuanfudao.tutor.activity.HomeActivity',
                'autoAcceptAlerts': 'True'

            })

    def FirstTest(self):
        time.sleep(4)
        self. driver.find_element_by_xpath(&quot;/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TextView[1]&quot;).click()
        self.driver.find_element_by_xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.RelativeLayout/android.widget.LinearLayout/android.widget.LinearLayout/android.widget.LinearLayout[3]/android.widget.GridLayout/android.widget.LinearLayout[1]/android.widget.TextView').click()
        self.driver.find_element_by_id('com.yuantiku.tutor:id/cartIcon').click()
        self.driver.find_element_by_id('com.yuantiku.tutor:id/toLoginPage').click()
</code></pre>
<h2 id="appium各种语言客户端安装">Appium各种语言客户端安装</h2>
<pre><code>appium客户端安装
Language/Framework Github Repo and Installation Instructions

Ruby https://github.com/appium/rubyjib

Python https://github.com/appium/python-client

Java https://github.com/appium/java-client

JavaScript (Node.js) https://github.com/admc/wd

Objective C https://github.com/appium/selenium-objective-c

PHP https://github.com/appium/php-client

C# (.NET) https://github.com/appium/appium-dotnet-driver

RobotFramework https://github.com/jollychang/robotframework-appiumlibrary
</code></pre>
<h2 id="用例部分">用例部分</h2>
<pre><code>❖ 导入依赖：
❖ Python from import 
❖ Java import
❖ capabilities 设置
❖ Python dict
❖ Java Class
❖ 初始化driver：
❖ Python webdriver.remote 
❖ Java new AppiumDriver
❖ 元素定位与操作 ﬁnd+action
❖ 断⾔ assert
</code></pre>
<h2 id="capabilities设置">capabilities设置</h2>
<pre><code>#测试平台（非必须）
desired_cups['platformName'] = 'Android'
#设备名称
desired_cups['deviceName'] = 'HuaWei'
#APK名
desired_cups['appPackage'] = 'com.tencent.mm'
#APKactivity
desired_cups['appActivity'] = 'com.tencent.mm.ui.LauncherUI'
#不需要再次签名
desired_cups['noSign'] = 'True'
#不需要清理数据，避免重新安装的问题
desired_cups['noReset'] = 'True'


❖ noReset fullReset 是否在测试前后重置相关环境
❖ unicodeKeyBoard resetKeyBoard 是否需要输入英之外的语言并在测试完成后重置输⼊法
</code></pre>
<h2 id="常见动作-2">常见动作</h2>
<pre><code>鼠标操作
❖ click
❖ sendKeys
❖ sendKeyEvent
❖ driver.swipe 滑动

手势操作：
❖ press
❖ release
❖ moveTo
❖ tap wait
❖ longPress
❖ cancel
❖ perform
</code></pre>
<h2 id="常用功能">常用功能</h2>
<pre><code>❖ https://github.com/appium/appium/blob/master/docs/en/
writing-running-appium/appium-bindings.md
❖ 系统操作
❖ lock background hideKeyBoard openNotiﬁcations shake
❖ startActivity currentActivity getCurrentPackage
❖ app操作
❖ installApp removeApp isInstalled closeApp launchApp reset 
getAppStrings
❖ getContextHandles getContext context
</code></pre>
<h2 id="参考">参考</h2>
<pre><code>1.安装nodejs

2.appium desktop 客户端集成工具

mac

https://testerhome.com/topics/6040

3.淘宝npm镜像（nodejs）

https://npm.taobao.org

4.搭建

https://testerhome.com/topics/12022

cnpm install -g appium

https://testerhome.com/topics/6040 



安装教程

https://ke.qq.com/webcourse/index.html#cid=348893&amp;term_id=100414926&amp;taid=2688327405097693&amp;vid=5285890787990378854 











</code></pre>
<h2 id="输入中文">输入中文</h2>
<pre><code>1.安装adbkeyboard
https://github.com/senzhk/ADBKeyBoard

2.设置默认输入法
adb shell ime set com.android.adbkeyboard/.AdbIME

3.输入中文
adb shell am broadcast -a ADB_INPUT_TEXT --es msg '一叶子'

4.keyboard键盘对照
KEYCODE_UNKNOWN=0;
KEYCODE_SOFT_LEFT=1;
KEYCODE_SOFT_RIGHT=2;
KEYCODE_HOME=3;
KEYCODE_BACK=4;
KEYCODE_CALL=5;
KEYCODE_ENDCALL=6;
KEYCODE_0=7;
KEYCODE_1=8;
KEYCODE_2=9;
KEYCODE_3=10;
KEYCODE_4=11;
KEYCODE_5=12;
KEYCODE_6=13;
KEYCODE_7=14;
KEYCODE_8=15;
KEYCODE_9=16;
KEYCODE_STAR=17;
KEYCODE_POUND=18;
KEYCODE_DPAD_UP=19;
KEYCODE_DPAD_DOWN=20;
KEYCODE_DPAD_LEFT=21;
KEYCODE_DPAD_RIGHT=22;
KEYCODE_DPAD_CENTER=23;
KEYCODE_VOLUME_UP=24;
KEYCODE_VOLUME_DOWN=25;
KEYCODE_POWER=26;
KEYCODE_CAMERA=27;
KEYCODE_CLEAR=28;
KEYCODE_A=29;
KEYCODE_B=30;
KEYCODE_C=31;
KEYCODE_D=32;
KEYCODE_E=33;
KEYCODE_F=34;
KEYCODE_G=35;
KEYCODE_H=36;
KEYCODE_I=37;
KEYCODE_J=38;
KEYCODE_K=39;
KEYCODE_L=40;
KEYCODE_M=41;
KEYCODE_N=42;
KEYCODE_O=43;
KEYCODE_P=44;
KEYCODE_Q=45;
KEYCODE_R=46;
KEYCODE_S=47;
KEYCODE_T=48;
KEYCODE_U=49;
KEYCODE_V=50;
KEYCODE_W=51;
KEYCODE_X=52;
KEYCODE_Y=53;
KEYCODE_Z=54;
KEYCODE_COMMA=55;
KEYCODE_PERIOD=56;
KEYCODE_ALT_LEFT=57;
KEYCODE_ALT_RIGHT=58;
KEYCODE_SHIFT_LEFT=59;
KEYCODE_SHIFT_RIGHT=60;
KEYCODE_TAB=61;
KEYCODE_SPACE=62;
KEYCODE_SYM=63;
KEYCODE_EXPLORER=64;
KEYCODE_ENVELOPE=65;
KEYCODE_ENTER=66;
KEYCODE_DEL=67;
KEYCODE_GRAVE=68;
KEYCODE_MINUS=69;
KEYCODE_EQUALS=70;
KEYCODE_LEFT_BRACKET=71;
KEYCODE_RIGHT_BRACKET=72;
KEYCODE_BACKSLASH=73;
KEYCODE_SEMICOLON=74;
KEYCODE_APOSTROPHE=75;
KEYCODE_SLASH=76;
KEYCODE_AT=77;
KEYCODE_NUM=78;
KEYCODE_HEADSETHOOK=79;
KEYCODE_FOCUS=80;//*Camera*focus
KEYCODE_PLUS=81;
KEYCODE_MENU=82;
KEYCODE_NOTIFICATION=83;
KEYCODE_SEARCH=84;
KEYCODE_MEDIA_PLAY_PAUSE=85;
KEYCODE_MEDIA_STOP=86;
KEYCODE_MEDIA_NEXT=87;
KEYCODE_MEDIA_PREVIOUS=88;
KEYCODE_MEDIA_REWIND=89;
KEYCODE_MEDIA_FAST_FORWARD=90;
KEYCODE_MUTE=91;

4.python调用
https://www.cnblogs.com/libra13179/p/11326708.html


5.解决无发调用搜索（java）
//可输入中文，但此时键盘不可用，输入法键盘为Appium unicodeKeyboard
    inputById(&quot;com.ccigmall.b2c.android:id/search_input&quot;,&quot;回归150608163530&quot;);
    //使用adb shell 切换输入法-更改为谷歌拼音
    excuteAdbShell(&quot;adb shell ime set com.android.inputmethod.pinyin/.PinyinIME&quot;);
    //再次点击输入框，调取键盘，谷歌键盘被成功调出
    clickById(&quot;com.ccigmall.b2c.android:id/search_input&quot;);
    //点击右下角的搜索，即ENTER键
    sendKeyEvent(AndroidKeyCode.ENTER);
    //再次切回 输入法键盘为Appium unicodeKeyboard，方便下次输入中文
    excuteAdbShell(&quot;adb shell ime set io.appium.android.ime/.UnicodeIME&quot;);
    
 driver.sendKeyEvent(AndroidKeyCode.ENTER);

</code></pre>
<h2 id="android-studio-安装和-sdk-配置windows">Android-Studio 安装和 SDK 配置（windows）</h2>
<pre><code>Android-Studio下载地址：http://www.android-studio.org/ 
选择相应的OS版本下载，我们以 Windows 64bit 为例。 

新建系统变量： 
变量名：ANDROID_HOME 
变量值：C:\Users\ceba\AppData\Local\Android\Sdk（此处填写你自己的 SDK路径） 

 

输入完成，点击确定按钮。 
3.选择 Path，点击编辑： 

 

4.在变量值文本框录入： 
%ANDROID_HOME%/tools;%ANDROID_HOME%/tools/bin;%ANDROID_HOME%/platform-
tools;%ANDROID_HOME%/build-tools/x.x.x;%ANDROID_HOME%/emulator 



注意前后用;间隔，点击“确定”按钮； 
 

</code></pre>
<h2 id="appium-server-安装">Appium-Server 安装</h2>
<pre><code>1.下载node
https://nodejs.org/zh-cn/ 
进入后如下图所示，点击“其他下载”： 

2.验证
安装完之后，打开命令行工具，输入node –v 和npm –v验证。 
没有问题之后，看下文安装 Appium-Server

3.安装appium-server
安装Appium-Server 有两种方式： 
第一种： 
有科学上网条件，打开科学上网工具命令行直接录入： 
npm install –g appium 
第二种： 
没有科学上网条件，我们安装 cnpm设置淘宝镜像源后使用 cnpm安装，运行下面两条命令：
1.npm install -g cnpm --registry=https://registry.npm.taobao.org 
2.cnpm install –g appium 
安装完后验证： 
命令行运行：appium --session-override

</code></pre>
<h2 id="unittest">unittest</h2>
<pre><code>参考
https://docs.python.org/3/library/unittest.html#organizing-tests

</code></pre>
<h2 id="webview">webview</h2>
<pre><code>webview测试
第一种办法

@Test
public void webview(){
    driver.findElementByXPath(&quot;//android.widget.TextView[@text='沪深' and @resource-id='com.xueqiu.android:id/button_text']&quot;).click();
    driver.findElementByAccessibilityId(&quot;立即开户&quot;).click();
    driver.findElementByAccessibilityId(&quot;开始&quot;).click();
}
第二种办法

https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md
把所有版本的chromedriver都放到一个目录下，然后设置

desiredCapabilities.setCapability(&quot;chromedriverExecutableDir&quot;, &quot;/Users/seveniruby/projects/chromedriver/chromedrivers/&quot;);
借助于chrome://inspect/#devices 查看所有的手机webview

使用webview context切换到web测试状态再进行传统的web定位

@Test
public void context() throws InterruptedException {
    for(Object c : driver.getContextHandles()){
        System.out.println(c.toString());
    }
    System.out.println(driver.getPageSource());
    driver.findElementByXPath(&quot;//android.widget.TextView[@text='沪深' and @resource-id='com.xueqiu.android:id/button_text']&quot;).click();
    for(Object c : driver.getContextHandles()){
        System.out.println(c.toString());
    }
    Thread.sleep(3000);
    for(Object c : driver.getContextHandles()){
        System.out.println(c.toString());
    }

    driver.context(&quot;WEBVIEW_com.xueqiu.android&quot;);
    System.out.println(driver.getPageSource());
    driver.findElementByCssSelector(&quot;.inner&quot;).click();
}
PageObject
https://github.com/SeleniumHQ/selenium/wiki/PageObjects

示例：https://github.com/seveniruby/AppiumPageObjectDemo20180812.git



参考：
taskkill chromedriver https://www.jianshu.com/p/a4724482fc8f
http://appium.io/docs/en/writing-running-appium/web/hybrid/


多个topic切换webview时，识别不到新的webview，解决办法：
切换时，kill 掉chrome 或者

在 caps里面设置：
desired_caps['chromeOptions'] = {'androidProcess': 'com.tencent.mm:tools'} 切换微信里边webview
self.driver.switch_to.context('WEBVIEW_com.tencent.mm:tools')
webview第一次点击操作后继续操作无响应的问题暂时没找到原因暂这么处理了，切换到native再切换回webview，需要再添加一条desired_caps['recreateChromeDriverSessions'] = True appium API上说的是每次切换到非chrome-Driver时kill掉session 注意这个设置在appium 1.5版本上才做了处理，1.4版本上是有问题的。查看github的issue
https://github.com/appium/appium/issues/4502

参考思寒的方法：
https://testerhome.com/topics/6954



查看手机webview 手机上的webview版本对应系统的chromedriver版本 
adb shell dumpsys package com.google.android.webview | find &quot;versionName&quot;

参考：
https://www.jianshu.com/p/21123424c227


chromedriver和chrome版本对应问题，点击http://npm.taobao.org/mirrors/chromedriver/，点击最新版本的chromedrives，
查看notes.txt，就可以获得最新的版本对应表.

</code></pre>
<h2 id="公共函数">公共函数</h2>
<pre><code>1.configparseexample

#!/usr/bin/env python
#coding=utf-8

import ConfigParser

def get_cfg(in_file):
    config =ConfigParser.ConfigParser()
    config.read(in_file)
    return config

cfg = get_cfg(&quot;test.cfg&quot;)
print cfg.get(&quot;mail_server&quot;,&quot;smtp_host&quot;)
print cfg.get(&quot;tomcat_server&quot;,&quot;ip_address&quot;)

2.file
#!/usr/bin/env python
#coding=utf-8

import codecs
import time

import os

def open_example(in_file):
    '''
    r: read
    a: append
    w: write
    '''
    file_instance = open(in_file,&quot;r&quot;)
    content = file_instance.read()
    file_instance.close()
    print content

def open_uft8(in_file):
    file_instance = codecs.open(in_file, encoding=&quot;utf-8&quot;)
    content = file_instance.read()
    file_instance.close()
    print content


def write_uft8(in_file):
    file_instance = codecs.open(in_file, encoding=&quot;utf-8&quot;,mode=&quot;a&quot;)
    file_instance.write(u&quot;新的一行&quot;+&quot;\n&quot;)
    file_instance.write(u&quot;新的二行&quot;+&quot;\n&quot;)
    file_instance.writelines([u&quot;新的三行&quot;+&quot;\n&quot;,u&quot;新的四行&quot;+&quot;\n&quot;])

    file_instance.flush()
    print &quot;I am sleeping&quot;

    time.sleep(20)
    file_instance.close()
    #print content



if __name__==&quot;__main__&quot;:
    #open_example(&quot;filexample.txt&quot;)
    #open_uft8(&quot;filexample.txt&quot;)
    write_uft8(&quot;filexample.txt&quot;)
    
    
3.json
#!/usr/bin/env python
#coding=utf-8

import json

python_dic = { 'name' : &quot;fengcheng&quot;, u'sex' : &quot;Male&quot;, 'c' : 3, 'd' : 4, 'e' : 5 }
print  type(json.dumps(python_dic, encoding=&quot;utf-8&quot;))
print  json.dumps(python_dic, encoding=&quot;utf-8&quot;)


json_str = '{ &quot;name&quot; : &quot;fengcheng&quot;, &quot;sex&quot; : &quot;Male&quot;, &quot;c&quot; : 3, &quot;d&quot; : 4, &quot;e&quot; : 5 }'
print  type(json.loads(json_str, encoding=&quot;utf-8&quot;))
print json.loads(json_str)
json_value = json.loads(json_str)
print json_value['name']
print json.loads(json_str).get('name')

4.logging
#!/usr/bin/env python
#coding=utf-8

import logging
from logging.handlers import RotatingFileHandler
from logging.handlers import TimedRotatingFileHandler
import morelog

def log_basic():
    # CRITICAL 50; ERROR 40; WARNING 30; INFO 20; DEBUG 10, NOSET 0;
    logging.basicConfig(filename=&quot;web.log&quot;, level=0,
                        format='%(asctime)s %(name)s %(levelname)s %(module)s:%(lineno)d %(message)s')
    # logging.basicConfig(stream=sys.stdout,level=int(sys_cfg.get('sysparm','log_level')),format='%(asctime)s %(name)s %(levelname)s %(module)s:%(lineno)d %(message)s')

    logging.getLogger(&quot;paramiko&quot;).setLevel(logging.WARNING)
    logging.getLogger(&quot;selenium&quot;).setLevel(logging.WARNING)

    logging.debug(&quot;this is debug log&quot;)
    logging.info(&quot;test info log&quot;)



def log_rotate():
    format='%(asctime)s %(name)s %(levelname)s %(module)s:%(lineno)d %(message)s'
    logging.basicConfig(level=20,format='%(asctime)s %(name)s %(levelname)s %(module)s:%(lineno)d %(message)s')

    #定义RotatingFileHandler，日志文件大小超过10M时进行旋转，最大5个备份日志文件。
    rotateHandler = RotatingFileHandler('you.log', maxBytes=1024*0.01, backupCount=5)
    #rotateHandler.setLevel(logging.DEBUG)
    rotateHandler.setFormatter(logging.Formatter(format))
    logging.getLogger(&quot;&quot;).addHandler(rotateHandler)
    logging.getLogger().propagate = False

    logging.info(&quot;my log&quot;*500)


if __name__==&quot;__main__&quot;:
    log_basic()
    #log_rotate()
    
5.connectDb
#!/usr/bin/env python
#coding=utf-8

import MySQLdb,time,traceback,logging

class DBOperateAction:

    def __init__(self,dbhost,dbaccount,dbpasswd,dbname,port=3306,charset=&quot;utf8&quot;):
        self.dbhost=dbhost
        self.dbaccount=dbaccount
        self.dbpasswd=dbpasswd[::-1]
        self.dbname=dbname
        self.charset=charset
        self.port=port
        self.db_conn=&quot;&quot;
        self.db_cursor=&quot;&quot;

    def connect(self):
        try:
            self.db_conn=MySQLdb.connect(host=self.dbhost,user=self.dbaccount,passwd=self.dbpasswd,
                                         db=self.dbname,port=self.port,charset=self.charset, connect_timeout = 5)
            self.db_cursor=self.db_conn.cursor()
            return True
        except MySQLdb.OperationalError:
            logging.error(&quot;Connect to &quot;+self.dbhost+&quot; Failed&quot;)
            logging.exception(&quot;exception message:&quot;)
            return False

    def re_connect(self):
        logging.error(&quot;connect to mysql server failed, reconnect&quot;)
        try:
            self.db_conn=MySQLdb.connect(host=self.dbhost,user=self.dbaccount,passwd=self.dbpasswd,
                                         db=self.dbname,port=self.port,charset=&quot;utf8&quot;)
            self.db_cursor=self.db_conn.cursor()
            return True
        except MySQLdb.OperationalError:
            logging.error(&quot;Reconnect MySQL failed&quot;)
            return False

        
    def get_all_result(self,sql):
        try:
            #logging.info(&quot;Execute sql: &quot;+sql[:500])
            logging.info(&quot;Execute sql: &quot;+sql)
            self.db_cursor.execute(sql)
            self.db_conn.commit()
            result=self.db_cursor.fetchall()
            return result
        except MySQLdb.OperationalError:
            for i in range(0,3):
                time.sleep(5)
                if self.re_connect():
                    logging.info(&quot;reconnect to &quot;+self.dbhost+&quot;database successfully&quot;)
                    return False
        except MySQLdb.ProgrammingError:
            logging.exception(&quot;exception message:&quot;)
            return False
    
    def get_one_result(self,sql):
        try:
           logging.info(&quot;Execute sql: &quot;+sql[:500])
           self.db_cursor.execute(sql)
           self.db_conn.commit()
           result=self.db_cursor.fetchone()
           return result
        except MySQLdb.OperationalError:
            traceback.print_exc()
            for i in range(0,3):
                time.sleep(5)
                if self.re_connect():
                    self.db_cursor.execute(sql)
                    self.db_conn.commit()
                    result=self.db_cursor.fetchone()
                    logging.warn(&quot;Reconnect to &quot;+self.dbhost+&quot; successfully&quot;)
                    return result
            return False
    def close_connection(self):
        self.db_conn.close()

if __name__==&quot;__main__&quot;:

    host = &quot;127.0.0.1&quot;
    db_account = &quot;root&quot;
    db_passwd = &quot;321mij&quot;
    db_name = &quot;qainside&quot;

    db_operation = DBOperateAction(host, db_account, db_passwd, db_name, port=3306)
    db_operation.connect()
    select_sql=&quot;insert into countries (Name,CountryCode,shortCountryCode, region) VALUES ('testerhome','223','TH','Asia')&quot;
    print select_sql

    results=db_operation.get_all_result(select_sql)
    db_operation.close_connection()
    print results

    
6.sys
#!/usr/bin/env python
#coding=utf-8

import sys



print sys.platform

sys.exit(0)

7.class
#!/usr/bin/env python
#coding=utf-8

class Person(object):

    total_person=0
    def __init__(self, name, sex, province):
        print &quot;Init the class&quot;
        self.name = name
        self.sex =  sex
        self.province = province
        Person.total_person += 1

    def get_name(self):
        return self.name

    def get_sex(self):
        return self.sex


if __name__==&quot;__main__&quot;:
    person1 = Person(&quot;xiaozhang&quot;,&quot;Male&quot;,&quot;Beijing&quot;)
    #person1 = Person()
    print person1.sex
    print person1.name
    print person1.get_name()
    print person1.total_person
    print &quot;*&quot;*50

    person2 = Person(&quot;Hanmeimei&quot;, &quot;Female&quot;, &quot;Shanghai&quot;)
    print person2.sex
    print person2.total_person
    
    
#!/usr/bin/env python
#coding=utf-8


class Person:

    def set_name(self,name):
        self.name= name

    def get_name(self):
        return self.name

    def set_person_attribute(self, sex, province):
        self.sex = sex
        self.province = province

    def get_sex(self):
        return self.sex



if __name__==&quot;__main__&quot;:
    per1  = Person()
    per1.set_name(&quot;hanmeimei&quot;)
    print per1.get_name()
    per1.set_person_attribute(&quot;Female&quot;,&quot;Shanghai&quot;)
    print  per1.get_sex()

#!/usr/bin/env python
#coding=utf-8

from classexample2 import Person

class Student(Person):

    def __init__(self,name, sex, province, grade):
        super(Student, self).__init__(name, sex, province)
        #Person.__init__(self,name, sex, province)
        self.grade = grade

    def get_grade(self):
        return self.grade

    def get_name(self):
        return &quot;我不告诉你student名字&quot;

    def get_nick_name(self):
        name  = Person.get_name(self)
        if name.startswith(&quot;xiao&quot;):
            return name.replace(&quot;xiao&quot;,&quot;small_&quot;)
        else:
            return name

if __name__==&quot;__main__&quot;:
    ss=Student(&quot;xiaozhang&quot;,&quot;Male&quot;,&quot;Beijing&quot;,6)
    #print ss.name
    #print ss.get_name()
    print ss.get_nick_name()


#!/usr/bin/env python
#coding=utf-8


from classexample4 import Student
from classexample2 import Person

class SeniorStudent(Student):

    def __init__(self,name, sex, province, grade):
        #super(StudentSenior, self).__init__(name, sex, province,grade)
        Student.__init__(self,name, sex, province,grade)
        self.grade = grade

    def get_grade(self):
        return self.grade

    def get_name(self):
        return &quot;我不告诉你Girl名字&quot;

    def overtime_study(self):
        if self.grade == 3:
            return u&quot;补课&quot;
        else:
            return u&quot;不补课&quot;

    def get_new_name(self):
        name  = Person.get_name(self)
        if name.startswith(&quot;xiao&quot;):
            print &quot;small&quot;
        else:
            print &quot;big&quot;


if __name__==&quot;__main__&quot;:
    sg=SeniorStudent(&quot;huahua&quot;,&quot;Female&quot;,&quot;Shanghai&quot;,3)
    print sg.get_name()
    sg.get_new_name()
    #print sg.get_sex()



#!/usr/bin/env python
#coding=utf-8


class Person:

    total_person=0
    def __init__(self, name, sex, province):
        print &quot;Init the class&quot;
        self.name = name
        self.sex =  sex
        self.province = province
        Person.total_person += 1

    @staticmethod
    def set_new_name(new_name):
        return &quot;new name is:&quot;+new_name

    @property
    def get_sex(self):
        return self.sex

    def get_name(self):
        return self.name

    @classmethod
    def set_new_province(cls,new_province):
        return &quot;Your provience is :&quot;+ new_province


if __name__==&quot;__main__&quot;:

    #print Person.set_new_name(&quot;hanmeimei&quot;)
    #print Person.get_name()
    print Person.set_new_province(&quot;Jiangsu&quot;)
    print &quot;*&quot;*50

    sg = Person(&quot;huahua&quot;, &quot;Female&quot;, &quot;Shanghai&quot;)
    print sg.get_sex

    print sg.set_new_name(&quot;Fangcheng&quot;)
    print sg.set_new_province(&quot;Zhejiang&quot;)




</code></pre>
<h2 id="pytest插件">pytest插件</h2>
<pre><code>http://plugincompat.herokuapp.com/

常用用法：

1.参数化
• pytest.mark.parametrize

2.多个Assert
• 一个个比较数值，第一个失败就退出

3.超时重试
•pytest-rerunfails

4.数据依赖
•pytest-ording

5.用例等级
•pytest-marks

6.setUp&amp;tearDown
•pytest-fixtures
直接通过函数名字调用：

import pytest
@pytest.fixture()
def loginandlogout():
print('do login action\n')
yield #之前相当于setup 之后相当于teardown
print(&quot;do logout action&quot;)
class TestSample:
def test_answer(self, 
loginandlogout):
….
def test_answer2(self, 
loginandlogout):




使用usefixtures decorateor：

import pytest
@pytest.fixture()
def loginandlogout():
print('do login action\n')
yield
print(&quot;do logout action&quot;)
class TestSample:

@pytest.mark.usefixtures('loginandlog
out')
def test_answer(self):


使用autouse：

@pytest.fixture(scope='module',autouse=True)
def loginandlogout():
print('do login action\n')
yield
print(&quot;do logout action\n&quot;)
@pytest.fixture(scope='class',autouse=True)
def clickhome():
print('click home button\n')
yield
print(&quot;end click home  link\n&quot;)
class TestSample:
def test_answer(self):  
def test_answer2(self):
class TestSampleTwo:
def test_two_answer(self):

Fixture scope
• module
• session
• class
• package


</code></pre>
<h2 id="用例执行方式">用例执行方式</h2>
<pre><code>执行一个module
• pytest -v src/testcases/api/test_autouse.py

执行一个类，一个方法
• pytest -v src/testcases/api/test_autouse.py::TestSample
• pytest -v src/testcases/api/test_autouse.py::TestSample::test_answer

执行一个目录或者package
• pytest -v src/testcases/api

通过marks标签执行
• pytest -m P0 src/testcases/api/
pytest -s -q --alluredir

</code></pre>
<h2 id="minicooper-搭建方式">minicooper 搭建方式</h2>
<pre><code>`# 简介
使用uiautomator2+pytest+allure进行Android的UI自动化测试

# 环境搭建

## pytest框架
pip install pytest==3.7

## allure报告

</code></pre>
<p>命令:<br>
py.test --alluredir=reports<br>
allure generate reports<br>
allure generate reports --clean<br>
allure generate --clean reports -o myreport<br>
用火狐浏览器打开,chrome会404</p>
<pre><code>## uiautomator2官方文档
https://github.com/openatx/uiautomator2

## 安装atx-agent
pip uninstall uiautomator2
pip install --pre uiautomator2

初始化python -m uiautomator2 init


## 查看页面元素
pip install weditor
开启 python -m weditor   会占用uiautomatorView的资源


## 运行命令

测试单个方法: pytest -k test_home_search --alluredir=reports -s &lt;br&gt;
测试单个用例:pytest -s testcase/test_find.py &lt;br&gt;
测试PO级Case: pytest -v -m &quot;P0&quot; --alluredir=reports &lt;br&gt;
不测试PO级Case: pytest -v -m &quot;not P0&quot; --alluredir=reports &lt;br&gt;

## 生成报告
allure generate --clean reports -o myreport

## 无线连接
手机的ip地址需要和pc电脑的ip地址在一个网段上
d = ut2.connect(&quot;192.168.129.93&quot;)

</code></pre>
<pre><code>## 学习笔记
https://docs.pytest.org/en/latest/example/simple.html


## iOS环境搭建
查看设备中app列表
ideviceinstaller -u 86616cbaa40e52d3f9236ec982dd6f1e933a44bd -l



浅谈自动化测试工具 python-uiautomator2
https://testerhome.com/topics/11357

</code></pre>
<h2 id="adb-相关命令">adb 相关命令</h2>
<pre><code>获取系统api版本

adb shell getprop ro.build.version.sdk

获取系统版本

adb shell getprop ro.build.version.release

获取手机分辨率

adb shell wm size

获取屏幕密度

adb shell wm density

获取手机型号

adb shell getprop ro.product.model

查看手机厂商

adb shell getprop ro.product.manufacturer

停止应用

adb shell am force-stop io.appium.uiautomator2.server

列出所有关于指定的包 

adb shell pm list packages io.appium.uiautomator2.server

获取安装包的信息

adb shell dumpsys package io.appium.uiautomator2.server

列出手机中已安装的instrumentation  

adb shell pm list instrumentation

等待设备连接上

adb wait-for-device

输出ping 

adb shell echo ping

查看手机里正在运行的进程

adb shell ps

adb shell am start -W -n io.appium.settings/.Settings -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000

adb shell appops set io.appium.settings android\:mock_location allow

安装包 adb insatll 包

获取系统默认输入法

adb shell settings get secure default_input_method

adb shell ime enable io.appium.android.ime/.UnicodeIME

adb shell ime set io.appium.android.ime/.UnicodeIME

pc上所有8200端口重定向到手机的6790端口 

adb forward tcp\:8200 tcp\:6790

删除json文件

adb shell rm -rf /data/local/tmp/strings.json

列出对应包名的所在位置

adb shell pm path com.xueqiu.android

将指定包拷贝到指定pc的临时目录下

adb pull /data/app/com.xueqiu.android-2/base.apk C\:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\com.xueqiu.android.apk

将pc上的json文件推送到手机上 

adb push C\:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\com.xueqiu.android\\strings.json /data/local/tmp

清除数据和缓存

adb shell pm clear com.xueqiu.android

adb shell am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner

获取当前活动窗口的信息

adb shell dumpsys window

获取设备上Unix域套接字信息 

adb shell cat /proc/net/unix

</code></pre>
]]></content>
    </entry>
</feed>